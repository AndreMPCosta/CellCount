#:import Toolbar kivymd.toolbar.Toolbar
#:import ThemeManager kivymd.theming.ThemeManager
#:import MDNavigationDrawer kivymd.navigationdrawer.MDNavigationDrawer
#:import NavigationLayout kivymd.navigationdrawer.NavigationLayout
#:import NavigationDrawerDivider kivymd.navigationdrawer.NavigationDrawerDivider
#:import NavigationDrawerToolbar kivymd.navigationdrawer.NavigationDrawerToolbar
#:import NavigationDrawerSubheader kivymd.navigationdrawer.NavigationDrawerSubheader
#:import MDThemePicker kivymd.theme_picker.MDThemePicker
#:import MDLabel kivymd.label
#:import MDTabbedPanel kivymd.tabs.MDTabbedPanel
#:import OneLineAvatarIconListItem kivymd.list.OneLineAvatarIconListItem
#:import OneLineListItem kivymd.list.OneLineListItem
#:import MDAccordion kivymd.accordion.MDAccordion
#:import MDAccordionItem kivymd.accordion.MDAccordionItem
#:import MDAccordionSubItem kivymd.accordion.MDAccordionSubItem
#:import get_color_from_hex kivy.utils.get_color_from_hex
#:import MDIconButton kivymd.button.MDIconButton
#:import items config.items
#:import group_cells config.group_cells
#:import MDResetCheckbox custom_uix.MDResetCheckbox


CellCountRoot:
    id: main_layout
    NavDrawer:
        id: nav_drawer
    BoxLayout:
        orientation: 'vertical'
        id: main_box
        Toolbar:
            id: toolbar
            title: 'CellCount'
            md_bg_color: app.theme_cls.primary_color
            background_palette: 'Primary'
            background_hue: '500'
            left_action_items: [['menu', lambda x: root.toggle_nav_drawer()]]
            right_action_items: [['dots-vertical', lambda x: self.dots_menu.open(self.ids.right_actions)]]
        ScreenManagement:
            id: scr_mngr

<NavDrawer>:
    current_session: current_session
    workspace: workspace
    results: results
    theming: theming
    #id: nav_drawer
    NavigationDrawerToolbar:
        title: "Navigation Drawer"
    NavigationDrawerIconButton:
        id: current_session
        icon: 'checkbox-blank-circle'
        text: "Current Session"
        on_release: app.root.ids.scr_mngr.current = 'current_session'
    NavigationDrawerIconButton:
        id: workspace
        icon: 'checkbox-blank-circle'
        text: "Select Cell Type"
        on_release: app.root.ids.scr_mngr.current = 'workspace'
    NavigationDrawerIconButton:
        id: results
        icon: 'checkbox-blank-circle'
        text: "Stored Results"
        on_release: app.root.ids.scr_mngr.current = 'results'
    NavigationDrawerIconButton:
        id: theming
        icon: 'checkbox-blank-circle'
        text: "Themes"
        on_release: app.root.ids.scr_mngr.current = 'theming'

<ScreenManagement>:


<ShowLicense>:
    link_label: link_label
    size_hint: .8, .8
    MDLabel:
        id: link_label
        font_style: 'Body1'
        theme_text_color: 'Primary'
        valign: 'top'
        pos: root.x, root.y
        text_size: self.width, None
        size_hint_y: None
        height: self.texture_size[1]


<Workspace>:
    accordion: accordion
    name: 'workspace'
    tree: 1
    BoxLayout:
        MDAccordion:
            id: accordion
            orientation: 'vertical'
            size_hint_x: None
            width: '185dp'
            MDAccordionItem:
                title: app.group_cells[0]
                icon: 'checkbox-blank-circle'
                MDAccordionSubItem:
                    text: app.items[app.group_cells[0]][0].keys()[0]
                    on_release: secondary_screen_manager.current = items[group_cells[0]][0].keys()[0]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[0]][1]
                    on_release: secondary_screen_manager.current = items[group_cells[0]][1]
            MDAccordionItem:
                title: app.group_cells[1]
                icon: 'checkbox-blank-circle'
                MDAccordionSubItem:
                    text: app.items[app.group_cells[1]][0]
                    on_release: secondary_screen_manager.current = items[group_cells[1]][0]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[1]][1]
                    on_release: secondary_screen_manager.current = items[group_cells[1]][1]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[1]][2]
                    on_release: secondary_screen_manager.current = items[group_cells[1]][2]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[1]][3]
                    on_release: secondary_screen_manager.current = items[group_cells[1]][3]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[1]][4]
                    on_release: secondary_screen_manager.current = items[group_cells[1]][4]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[1]][5].keys()[0]
                    on_release: secondary_screen_manager.current = items[group_cells[1]][5].keys()[0]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[1]][6].keys()[0]
                    on_release: secondary_screen_manager.current = items[group_cells[1]][6].keys()[0]
            MDAccordionItem:
                title: app.group_cells[2]
                icon: 'checkbox-blank-circle'
                MDAccordionSubItem:
                    text: app.items[app.group_cells[2]][0]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[2]][1]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[2]][2]
            MDAccordionItem:
                title: app.group_cells[3]
                icon: 'checkbox-blank-circle'
                MDAccordionSubItem:
                    text: app.items[app.group_cells[3]][0]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[3]][1]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[3]][2]
            MDAccordionItem:
                title: app.group_cells[4]
                icon: 'checkbox-blank-circle'
                MDAccordionSubItem:
                    text: app.items[app.group_cells[4]][0]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[4]][1]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[4]][2]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[4]][3]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[4]][4]
            MDAccordionItem:
                title: app.group_cells[5]
                icon: 'checkbox-blank-circle'
                MDAccordionSubItem:
                    text: app.items[app.group_cells[5]][0]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[5]][1]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[5]][2]
                MDAccordionSubItem:
                    text: app.items[app.group_cells[5]][3]
        SecondScreenManagement:
            id: secondary_screen_manager
            Erithroblast:
            Reticulocyte:
            Myeloblast:
            Promyelocyte:
            Myelocyte:
            Metamyelocyte:
            Band:
            Immature_forms:
            Mature_forms:
#        MDLabel:
#            text: "Empty Workspace"
#            theme_text_color: 'Primary'
#            pos_hint: {'center_x': 0.5}
#            halign: 'center'
#    MDFloatingActionButton:
#        id: add_cells
#        icon: 'plus'
#        opposite_colors: True
#        elevation_normal: 8
#        pos_hint: {'center_x': 0.85, 'center_y': 0.1}
#        on_release: app.root.ids.scr_mngr.change_screen('pickspace')

<Theming>:
    name: 'theming'
    BoxLayout:
        orientation: 'vertical'
        size_hint_y: None
        height: dp(80)
        center_y: self.parent.center_y
        MDRaisedButton:
            size_hint: None, None
            size: 3 * dp(48), dp(48)
            center_x: self.parent.center_x
            text: 'Change theme'
            on_release: MDThemePicker().open()
            opposite_colors: True
            pos_hint: {'center_x': 0.5}
        MDLabel:
            text: "Current: " + app.theme_cls.theme_style + ", " + app.theme_cls.primary_palette
            theme_text_color: 'Primary'
            pos_hint: {'center_x': 0.5}
            halign: 'center'

<CurrentSession>:
    working_layout: working_layout
    #s_layout: s_layout
    #pick_layout: pick_layout
    name: 'current_session'
#    MDLabel:
#        text: 'Empty Workspace'
#        halign: 'center'
#        pos_hint: {'center_x': 0.5}
#        theme_text_color: 'Primary'
    ScrollView:
        BoxLayout:
            orientation: 'vertical'
            size_hint_y: None
            GridLayout:
                id: working_layout
                spacing: 1
                cols: root.n_of_cols
                size_hint_y: None
                col_force_default: 'true'
                col_default_width: self.width / self.cols
                row_force_default: 'true'
                row_default_height: self.width / self.cols
            FloatLayout:
                id: plus_layout
                #height: root.height - add_cells.height - root.root.ids
                MDFloatingActionButton:
                    id: add_cells
                    icon: 'plus'
                    #pos_hint: {'center_x': 0.8, 'center_y': .9}
                    pos: root.width - self.width * 1.5, - root.height + self.height * 2 + working_layout.height
                    opposite_colors: True
                    elevation_normal: 8
                    on_release: app.root.ids.scr_mngr.current = 'workspace'
    #            Scatter:
    #                id: s_layout
    #            BoxLayout:
    #                orientation: 'vertical'
    #                height: dp(72)
#            FloatLayout:
#                id: plus_layout
#                size_hint_y: None
#                #height: root.height - add_cells.height - root.parent.toolbar.height





<Erithroblast>:
    name: items[group_cells[0]][0].keys()[0]
    main: group_cells[0]
    index: 0
    BoxLayout:
        id: main_container
        orientation: 'vertical'
        padding: [dp(10), 0, 0, 0]
        spacing: dp(20)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l1
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[0]][0].values()[0][0]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l1.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l2
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[0]][0].values()[0][1]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l2.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l3
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[0]][0].values()[0][2]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l3.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l4
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[0]][0].values()[0][3]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l4.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
    MDRaisedButton:
        id: update_current_session
        text: 'Back'
        elevation_normal: 2
        pos_hint: {'center_x': 0.5, 'center_y': 0.15}
        opposite_colors: True
        on_release: app.root.ids['scr_mngr'].change_screen('current_session')

<Reticulocyte>:
    index: 1
    name: items[group_cells[0]][self.index]
    main: group_cells[0]
    BoxLayout:
        id: main_container
        orientation: 'vertical'
        padding: [dp(10), 0, 0, 0]
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l1
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[0]][root.index]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l1.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
    MDRaisedButton:
        id: update_current_session
        text: 'Back'
        elevation_normal: 2
        pos_hint: {'center_x': 0.5, 'center_y': 0.15}
        opposite_colors: True
        on_release: app.root.ids['scr_mngr'].change_screen('current_session')


<Myeloblast>:
    index: 0
    name: items[group_cells[1]][self.index]
    main: group_cells[1]
    BoxLayout:
        id: main_container
        orientation: 'vertical'
        padding: [dp(10), 0, 0, 0]
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l1
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[1]][root.index]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l1.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
    MDRaisedButton:
        id: update_current_session
        text: 'Back'
        elevation_normal: 2
        pos_hint: {'center_x': 0.5, 'center_y': 0.15}
        opposite_colors: True
        on_release: app.root.ids['scr_mngr'].change_screen('current_session')


<Promyelocyte>:
    index: 1
    name: items[group_cells[1]][self.index]
    main: group_cells[1]
    BoxLayout:
        id: main_container
        orientation: 'vertical'
        padding: [dp(10), 0, 0, 0]
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l1
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[1]][root.index]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l1.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
    MDRaisedButton:
        id: update_current_session
        text: 'Back'
        elevation_normal: 2
        pos_hint: {'center_x': 0.5, 'center_y': 0.15}
        opposite_colors: True
        on_release: app.root.ids['scr_mngr'].change_screen('current_session')


<Myelocyte>:
    index: 2
    name: items[group_cells[1]][self.index]
    main: group_cells[1]
    BoxLayout:
        id: main_container
        orientation: 'vertical'
        padding: [dp(10), 0, 0, 0]
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l1
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[1]][root.index]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l1.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
    MDRaisedButton:
        id: update_current_session
        text: 'Back'
        elevation_normal: 2
        pos_hint: {'center_x': 0.5, 'center_y': 0.15}
        opposite_colors: True
        on_release: app.root.ids['scr_mngr'].change_screen('current_session')

<Metamyelocyte>:
    index: 3
    name: items[group_cells[1]][self.index]
    main: group_cells[1]
    BoxLayout:
        id: main_container
        orientation: 'vertical'
        padding: [dp(10), 0, 0, 0]
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l1
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[1]][root.index]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l1.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
    MDRaisedButton:
        id: update_current_session
        text: 'Back'
        elevation_normal: 2
        pos_hint: {'center_x': 0.5, 'center_y': 0.15}
        opposite_colors: True
        on_release: app.root.ids['scr_mngr'].change_screen('current_session')

<Band>:
    index: 4
    name: items[group_cells[1]][self.index]
    main: group_cells[1]
    BoxLayout:
        id: main_container
        orientation: 'vertical'
        padding: [dp(10), 0, 0, 0]
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l1
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[1]][root.index]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l1.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
    MDRaisedButton:
        id: update_current_session
        text: 'Back'
        elevation_normal: 2
        pos_hint: {'center_x': 0.5, 'center_y': 0.15}
        opposite_colors: True
        on_release: app.root.ids['scr_mngr'].change_screen('current_session')

<Immature_forms>:
    index: 5
    name: items[group_cells[1]][self.index].keys()[0]
    main: group_cells[1]
    BoxLayout:
        id: main_container
        orientation: 'vertical'
        padding: [dp(10), 0, 0, 0]
        spacing: dp(20)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l1
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[1]][root.index].values()[0][0]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l1.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l2
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[1]][root.index].values()[0][1]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l2.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l3
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[1]][root.index].values()[0][2]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l3.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
            #size_hint_y: 1 - (len((main_container.children))*0.1)
    MDRaisedButton:
        id: update_current_session
        text: 'Back'
        elevation_normal: 2
        pos_hint: {'center_x': 0.5, 'center_y': 0.15}
        opposite_colors: True
        on_release: app.root.ids['scr_mngr'].change_screen('current_session')


<Mature_forms>:
    index: 6
    name: items[group_cells[1]][self.index].keys()[0]
    main: group_cells[1]
    BoxLayout:
        id: main_container
        orientation: 'vertical'
        padding: [dp(10), 0, 0, 0]
        spacing: dp(20)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l1
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[1]][root.index].values()[0][0]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l1.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l2
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[1]][root.index].values()[0][1]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l2.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: .1
            MDLabel:
                id: l3
                font_style: "Caption"
                halign: "left"
                text: app.items[app.group_cells[1]][root.index].values()[0][2]
                theme_text_color: 'Secondary' if app.theme_cls.theme_style == 'Light' else 'Primary'
            MDResetCheckbox:
                pass_text: l3.text
                size_hint: None, None
                size: dp(48), dp(48)
                pos_hint: {'center_x': 0.25, 'center_y': 0.5}
                on_state: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(self, app)
        BoxLayout:
    MDRaisedButton:
        id: update_current_session
        text: 'Back'
        elevation_normal: 2
        pos_hint: {'center_x': 0.5, 'center_y': 0.15}
        opposite_colors: True
        on_release: app.root.ids['scr_mngr'].change_screen('current_session')


#    MDFloatingActionButton:
#        id: add_cells
#        icon: 'plus'
#        opposite_colors: True
#        elevation_normal: 8
#        pos_hint: {'center_x': 0.75, 'center_y': 0.1}
#        on_release: app.root.ids['scr_mngr'].get_screen('current_session').populate_current_session(root, app, root.parent.color_manager)

<SecondScreenManagement>:
